// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum OHLCVOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct OHLCV<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OHLCV<'a> {
  type Inner = OHLCV<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OHLCV<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
  pub const VT_OPEN: flatbuffers::VOffsetT = 6;
  pub const VT_HIGH: flatbuffers::VOffsetT = 8;
  pub const VT_LOW: flatbuffers::VOffsetT = 10;
  pub const VT_CLOSE: flatbuffers::VOffsetT = 12;
  pub const VT_VOLUME: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OHLCV { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OHLCVArgs
  ) -> flatbuffers::WIPOffset<OHLCV<'bldr>> {
    let mut builder = OHLCVBuilder::new(_fbb);
    builder.add_volume(args.volume);
    builder.add_close(args.close);
    builder.add_low(args.low);
    builder.add_high(args.high);
    builder.add_open(args.open);
    builder.add_timestamp(args.timestamp);
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(OHLCV::VT_TIMESTAMP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn open(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OHLCV::VT_OPEN, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn high(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OHLCV::VT_HIGH, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn low(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OHLCV::VT_LOW, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn close(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OHLCV::VT_CLOSE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn volume(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(OHLCV::VT_VOLUME, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for OHLCV<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<f64>("open", Self::VT_OPEN, false)?
     .visit_field::<f64>("high", Self::VT_HIGH, false)?
     .visit_field::<f64>("low", Self::VT_LOW, false)?
     .visit_field::<f64>("close", Self::VT_CLOSE, false)?
     .visit_field::<u64>("volume", Self::VT_VOLUME, false)?
     .finish();
    Ok(())
  }
}
pub struct OHLCVArgs {
    pub timestamp: u64,
    pub open: f64,
    pub high: f64,
    pub low: f64,
    pub close: f64,
    pub volume: u64,
}
impl<'a> Default for OHLCVArgs {
  #[inline]
  fn default() -> Self {
    OHLCVArgs {
      timestamp: 0,
      open: 0.0,
      high: 0.0,
      low: 0.0,
      close: 0.0,
      volume: 0,
    }
  }
}

pub struct OHLCVBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OHLCVBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(OHLCV::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn add_open(&mut self, open: f64) {
    self.fbb_.push_slot::<f64>(OHLCV::VT_OPEN, open, 0.0);
  }
  #[inline]
  pub fn add_high(&mut self, high: f64) {
    self.fbb_.push_slot::<f64>(OHLCV::VT_HIGH, high, 0.0);
  }
  #[inline]
  pub fn add_low(&mut self, low: f64) {
    self.fbb_.push_slot::<f64>(OHLCV::VT_LOW, low, 0.0);
  }
  #[inline]
  pub fn add_close(&mut self, close: f64) {
    self.fbb_.push_slot::<f64>(OHLCV::VT_CLOSE, close, 0.0);
  }
  #[inline]
  pub fn add_volume(&mut self, volume: u64) {
    self.fbb_.push_slot::<u64>(OHLCV::VT_VOLUME, volume, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OHLCVBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OHLCVBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OHLCV<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OHLCV<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OHLCV");
      ds.field("timestamp", &self.timestamp());
      ds.field("open", &self.open());
      ds.field("high", &self.high());
      ds.field("low", &self.low());
      ds.field("close", &self.close());
      ds.field("volume", &self.volume());
      ds.finish()
  }
}
pub enum OHLCVListOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct OHLCVList<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OHLCVList<'a> {
  type Inner = OHLCVList<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OHLCVList<'a> {
  pub const VT_ITEMS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OHLCVList { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OHLCVListArgs<'args>
  ) -> flatbuffers::WIPOffset<OHLCVList<'bldr>> {
    let mut builder = OHLCVListBuilder::new(_fbb);
    if let Some(x) = args.items { builder.add_items(x); }
    builder.finish()
  }


  #[inline]
  pub fn items(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<OHLCV<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<OHLCV>>>>(OHLCVList::VT_ITEMS, None)}
  }
}

impl flatbuffers::Verifiable for OHLCVList<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<OHLCV>>>>("items", Self::VT_ITEMS, false)?
     .finish();
    Ok(())
  }
}
pub struct OHLCVListArgs<'a> {
    pub items: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<OHLCV<'a>>>>>,
}
impl<'a> Default for OHLCVListArgs<'a> {
  #[inline]
  fn default() -> Self {
    OHLCVListArgs {
      items: None,
    }
  }
}

pub struct OHLCVListBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OHLCVListBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_items(&mut self, items: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<OHLCV<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OHLCVList::VT_ITEMS, items);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OHLCVListBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OHLCVListBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OHLCVList<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OHLCVList<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OHLCVList");
      ds.field("items", &self.items());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `OHLCVList`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ohlcvlist_unchecked`.
pub fn root_as_ohlcvlist(buf: &[u8]) -> Result<OHLCVList, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<OHLCVList>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `OHLCVList` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_ohlcvlist_unchecked`.
pub fn size_prefixed_root_as_ohlcvlist(buf: &[u8]) -> Result<OHLCVList, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<OHLCVList>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `OHLCVList` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ohlcvlist_unchecked`.
pub fn root_as_ohlcvlist_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OHLCVList<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<OHLCVList<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `OHLCVList` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ohlcvlist_unchecked`.
pub fn size_prefixed_root_as_ohlcvlist_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OHLCVList<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<OHLCVList<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a OHLCVList and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `OHLCVList`.
pub unsafe fn root_as_ohlcvlist_unchecked(buf: &[u8]) -> OHLCVList {
  flatbuffers::root_unchecked::<OHLCVList>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed OHLCVList and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `OHLCVList`.
pub unsafe fn size_prefixed_root_as_ohlcvlist_unchecked(buf: &[u8]) -> OHLCVList {
  flatbuffers::size_prefixed_root_unchecked::<OHLCVList>(buf)
}
pub const OHLCVLIST_EXTENSION: &str = "bin";

#[inline]
pub fn finish_ohlcvlist_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<OHLCVList<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_ohlcvlist_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<OHLCVList<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
